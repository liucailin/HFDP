The Iterator Pattern provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
It also places the task of traversal on the iterator object, not on the aggregate, which simplifies the aggregate interface and implementation, and places the responsibility where it should be.

Single Responsibility
Every responsibility of a class is an area of potential change.

The Composite Pattern allows you to composite objects into tree structures to represent part-whole hierarchies. Composite lets client treat individual objects and compositions of objects uniformly.